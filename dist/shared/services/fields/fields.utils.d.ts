import { CaseField } from '../../domain/definition';
import { WizardPage } from '../../components/case-editor/domain';
import { Predicate } from '../../domain/predicate.model';
import { CaseEventTrigger, CaseView } from '../../domain/case-view';
import { AbstractControl } from '@angular/forms';
import { AbstractFormFieldComponent } from '../../components/palette/base-field/abstract-form-field.component';
export declare class FieldsUtils {
    private static readonly currencyPipe;
    private static readonly datePipe;
    static readonly LABEL_SUFFIX = "-LABEL";
    static convertToCaseField(obj: any): CaseField;
    static toValuesMap(caseFields: CaseField[]): any;
    static getType(elem: any): string;
    static isObject(elem: any): boolean;
    static isNonEmptyObject(elem: any): boolean;
    static isArray(elem: any): boolean;
    static areCollectionValuesSimpleFields(fieldValue: any): boolean;
    static isCollectionOfSimpleTypes(fieldValue: any): boolean;
    static isMultiSelectValue(form: any): boolean;
    static isNonEmptyArray(pageFormFields: any): boolean;
    static isCollection(pageFormFields: any): boolean;
    static isCollectionWithValue(pageFormFields: any): boolean;
    static cloneObject(obj: any): any;
    static getCaseFields(caseView: CaseView): CaseField[];
    private static prepareValue;
    private static readonly DEFAULT_MERGE_FUNCTION;
    private static readonly LABEL_MERGE_FUNCTION;
    private static getMoneyGBP;
    private static getDate;
    private static getFixedListLabelByCodeOrEmpty;
    private static textForInvalidField;
    static addCaseFieldAndComponentReferences(c: AbstractControl, cf: CaseField, comp: AbstractFormFieldComponent): void;
    buildCanShowPredicate(eventTrigger: CaseEventTrigger, form: any): Predicate<WizardPage>;
    getCurrentEventState(eventTrigger: any, form: any): any;
    cloneCaseField(obj: any): CaseField;
    mergeCaseFieldsAndFormFields(caseFields: CaseField[], formFields: any): any;
    mergeLabelCaseFieldsAndFormFields(caseFields: CaseField[], formFields: any): any;
    controlIterator(aControl: AbstractControl, formArrayFn: (AbstractControl: any, CaseField: any) => void, formGroupFn: (FormGroup: any) => void, controlFn: (FormControl: any) => void): void;
    private mergeFields;
}
