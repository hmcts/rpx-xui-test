import { ElementRef, OnDestroy, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material';
import { Subscription } from 'rxjs';
import { DocumentManagementService } from '../../../services/document-management/document-management.service';
import { AbstractFieldWriteComponent } from '../base-field/abstract-field-write.component';
import { FileUploadStateService } from './file-upload-state.service';
export declare class WriteDocumentFieldComponent extends AbstractFieldWriteComponent implements OnInit, OnDestroy {
    private documentManagement;
    dialog: MatDialog;
    private fileUploadStateService;
    static readonly DOCUMENT_URL = "document_url";
    static readonly DOCUMENT_BINARY_URL = "document_binary_url";
    static readonly DOCUMENT_FILENAME = "document_filename";
    static readonly UPLOAD_ERROR_FILE_REQUIRED = "File required";
    static readonly UPLOAD_ERROR_NOT_AVAILABLE = "Document upload facility is not available at the moment";
    static readonly UPLOAD_WAITING_FILE_STATUS = "Uploading...";
    private uploadedDocument;
    selectedFile: File;
    private dialogConfig;
    fileInput: ElementRef;
    valid: boolean;
    fileUploadMessages: string;
    confirmReplaceResult: string;
    clickInsideTheDocument: boolean;
    fileUploadSubscription: Subscription;
    dialogSubscription: Subscription;
    clickout(event: any): void;
    constructor(documentManagement: DocumentManagementService, dialog: MatDialog, fileUploadStateService: FileUploadStateService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    isUploadInProgress(): boolean;
    cancelUpload(): void;
    resetUpload(): void;
    fileValidations(): void;
    fileValidationsOnTab(): void;
    fileChangeEvent(fileInput: any): void;
    openFileDialog(): void;
    fileSelectEvent(): void;
    openDialog(dialogConfig: any): void;
    triggerReplace(): void;
    getUploadedFileName(): any;
    private initDialog;
    private isAMandatoryComponent;
    private displayFileUploadMessages;
    private isUpLoadingAFile;
    private validateFormUploadedDocument;
    private updateDocumentForm;
    private createDocumentFormWithValidator;
    private createDocumentForm;
    private getErrorMessage;
}
